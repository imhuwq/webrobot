"""add_uuid_to_tables_alembic_script_step_two

Revision ID: 4699e18f3fc1
Revises: 44928473a854
Create Date: 2017-03-20 23:55:27.172478

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy import Table, MetaData

from server.utils import gen_uuid

# revision identifiers, used by Alembic.
revision = '4699e18f3fc1'
down_revision = '44928473a854'
branch_labels = None
depends_on = None

crontab_table = Table(
    'crontab', MetaData(),
    sa.Column('id', sa.Integer(), primary_key=True),
    sa.Column('uuid', sa.String(), unique=True, nullable=False)
)

interval_table = Table(
    'interval', MetaData(),
    sa.Column('id', sa.Integer(), primary_key=True),
    sa.Column('uuid', sa.String(), unique=True, nullable=False)
)

task_table = Table(
    'periodic_task', MetaData(),
    sa.Column('id', sa.Integer(), primary_key=True),
    sa.Column('uuid', sa.String(), unique=True, nullable=False)
)


def insert_uuid_to_crontab():
    connection = op.get_bind()
    crontab_rows = connection.execute(
        crontab_table.select().where(crontab_table.c.uuid == None)
    )
    for crontab_row in crontab_rows:
        id = crontab_row.id
        connection = op.get_bind()
        connection.execute(
            crontab_table.update().where(crontab_table.c.id == id).values(uuid=gen_uuid())
        )


def insert_uuid_to_interval():
    connection = op.get_bind()
    interval_rows = connection.execute(
        interval_table.select().where(interval_table.c.uuid == None)
    )
    for interval_row in interval_rows:
        id = interval_row.id
        connection = op.get_bind()
        connection.execute(
            interval_table.update().where(interval_table.c.id == id).values(uuid=gen_uuid())
        )


def insert_uuid_to_task():
    connection = op.get_bind()
    task_rows = connection.execute(
        task_table.select().where(task_table.c.uuid == None)
    )
    for task_row in task_rows:
        id = task_row.id
        connection = op.get_bind()
        connection.execute(
            task_table.update().where(task_table.c.id == id).values(uuid=gen_uuid())
        )


def insert_uuid():
    insert_uuid_to_crontab()
    insert_uuid_to_interval()
    insert_uuid_to_task()


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    insert_uuid()
    op.alter_column('crontab', 'uuid', existing_type=sa.VARCHAR(), nullable=False)
    op.alter_column('interval', 'uuid', existing_type=sa.VARCHAR(), nullable=False)
    op.alter_column('periodic_task', 'uuid', existing_type=sa.VARCHAR(), nullable=False)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('periodic_task', 'uuid',
                    existing_type=sa.VARCHAR(),
                    nullable=True)
    op.alter_column('interval', 'uuid',
                    existing_type=sa.VARCHAR(),
                    nullable=True)
    op.alter_column('crontab', 'uuid',
                    existing_type=sa.VARCHAR(),
                    nullable=True)
    # ### end Alembic commands ###
